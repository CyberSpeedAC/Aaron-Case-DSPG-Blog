[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Aaron Case DSPG Blog",
    "section": "",
    "text": "Week Three\n\n\n\n\n\n\n\nWeek Three\n\n\n\n\n\n\n\n\n\n\n\nMay 30, 2023\n\n\nAaron Case\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek Three Research\n\n\n\n\n\n\n\nWeek Three\n\n\nResearch\n\n\n\n\n\n\n\n\n\n\n\nMay 30, 2023\n\n\nAaron Case\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek Two\n\n\n\n\n\n\n\nWeek Two\n\n\n\n\n\n\n\n\n\n\n\nMay 29, 2023\n\n\nAaron Case\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImporting Census Data\n\n\n\n\n\n\n\nWeek Two\n\n\nCode\n\n\n\n\n\n\n\n\n\n\n\nMay 26, 2023\n\n\nAaron Case\n\n\n\n\n\n\n  \n\n\n\n\nWeek One\n\n\n\n\n\n\n\nWeek One\n\n\n\n\n\n\n\n\n\n\n\nMay 23, 2023\n\n\nAaron Case\n\n\n\n\n\n\n  \n\n\n\n\nCensus Visual\n\n\n\n\n\n\n\nWeek Two\n\n\nCode\n\n\n\n\n\n\n\n\n\n\n\nMay 23, 2023\n\n\nAaron Case\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Aaron_C_Week1/Aaron_C_Week1.html",
    "href": "posts/Aaron_C_Week1/Aaron_C_Week1.html",
    "title": "Week One",
    "section": "",
    "text": "Week One\nDuring week one my week goal is to learn as much as possible about Python and R in Datacamp\nLessons completed:\n\nIntroduction to R\nIntermediate R\nCleaning Data in R\nIntroduction to Python\nIntermediate Python\nData Manipulation with pandas\nAI Fundamentals\nGitHub Concepts\n\nAlso during week one I did a debriefing of project with the Employer."
  },
  {
    "objectID": "posts/Aaron_C_Week2/Aaron_C_Week2.html",
    "href": "posts/Aaron_C_Week2/Aaron_C_Week2.html",
    "title": "Week Two",
    "section": "",
    "text": "For week two my goal was to continue to learn in Datacamp\nLessons completed:\n\nWriting Efficient Python Code\nWeb Scraping in Python\n\nI also learned how to visualize data using Tidycensus with the American Community Survey Data"
  },
  {
    "objectID": "posts/Aaron_C_Week2/Importing Census Data.html",
    "href": "posts/Aaron_C_Week2/Importing Census Data.html",
    "title": "Importing Census Data",
    "section": "",
    "text": "Since I needed to extract a large amount of data from the American Community Survey (ASC) and convert it into a CSV file. In light of this I wrote this code to extract ASC data from the table codes. The Code takes in a list of names that you want the file name to be. Along with the corresponding table code. It also takes in a folder name. It then makes (if needed) and adds the CVS files to the specified folder (For a clean directory). Its important to note that where you run the R file is where a folder is made. I made this with the intentions of it being editable (and hopefully user friendly).\n\n####################\n#  Inserting Data  #\n####################\n\n\nfolder <- \"Folder_Name_Here\" # <---------- Change this value FIRST!\n\nACSList <- c(\n    # \"Data Name\",\"DataCode\", \n    # ...\n  ) \nACSListToCSV(ACSList,folder)\n\n\n##########################################\n#  Global Variables That can be Changed  #\n##########################################\n\n#To change the get_acs() geography variable\ngeographyType <- \"county\"\n\n#To change the get_acs() servay variable\nservayType <- \"ACS5\"\n\n#Change to NULL if no state\nstateType <- \"IA\"\n\n#This will make a geometry file as well if TRUE\nwithGeometry <- FALSE\n\n#checking the year\nyear = NULL\n\n###################################\n#  Functions that make life easy  #\n###################################\n\n#Imports \nlibrary(tidycensus) #For ACS extractions\nlibrary(stringi) #For folderNameFixer()\nlibrary(tigris)\noptions(tigris_use_cache = TRUE)\n\n\n#File name changers. This will set the name of the file. Feel free to edit this\nrenameFile <- function(tableTitle, tableCode, isGeometric){\n  fileName <- paste(tableTitle, \" (\", tableCode, sep='')\n  if(isGeometric){\n    fileName = paste(fileName, \", \",capFirst(\"tract\"), sep='')\n  } else {\n    fileName = paste(fileName, \", \",capFirst(geographyType), sep='')\n  }\n  if(is.null(stateType) == FALSE){\n    fileName = paste(fileName, \", \", stateType, sep='')\n  }\n  if(is.null(year) == FALSE){\n    fileName = paste(fileName, \", \", year, sep='')\n  }\n  fileName = paste(fileName, \", \", servayType, sep='')\n  if(isGeometric){\n    fileName = paste(fileName, \", Geometry).csv\", sep='')\n  } else {\n    fileName = paste(fileName, \").csv\", sep='')\n  }\n  return(fileName)\n}\n\n#ACS extractions.\n#Feel free to add to this list.\ngeoACSDataFrame = function(tableCode){\n  get_acs(\n    #Add Changes here\n    geography = \"tract\",\n    table = tableCode,\n    servay = servayType,\n    state = stateType,\n    geometry = TRUE\n  )\n}\n\ndefaultACSDataFrame = function(tableCode){\n  get_acs(\n    #Add Changes here\n    geography = geographyType,\n    table = tableCode,\n    servay = servayType,\n    state = stateType\n  )\n}\n\n#Conditions for files fell free to edit this\nfileImplications <- function(tableTitle, tableCode){\n  #Add a condition and apply both the ACS extraction and the File name changer\n  #Example\n  if(withGeometry){\n    fileName <- renameFile(tableTitle, tableCode, TRUE)\n    #output with Geometry\n    dataToCSV(geoACSDataFrame(tableCode), fileName)\n  }\n  \n  fileName <- renameFile(tableTitle, tableCode, FALSE)\n  #Default\n  #This Makes the CSV File\n  #format dataToCSV(your ACS DataFrame, File name changer() )\n  dataToCSV(defaultACSDataFrame(tableCode), fileName)\n}\n\n\n#For clarity capitalizes the first letter in a string and lowercases the rest (Feel free to Use)\ncapFirst = function(xStr){\n   paste(toupper(substring(xStr, 1, 1)), tolower(substring(xStr, 2, nchar(xStr))), sep = \"\")\n}\n#Validates and fixes folder name string (Feel free to edit)\nnameFixer <- function(xStr, fixType){\n  #Replaces bad characters with ''\n  xStr <- stri_replace_all_regex(xStr, \n                         pattern=c('/', ':', '\\\\*', '\"', '<', '>', '\\\\|'),\n                         replacement=c('-', '', '', '', '', '', ''),\n                         vectorize=FALSE)\n  if(xStr == \"\"){\n    if(capFirst(fixType) == \"Folder\"){\n      print(\"Ops the folder name has all bad characters lets fix that\")\n      xStr <- \"New_Data_Folder\"\n    }\n    else{\n      print(\"Ops the file name has all bad characters lets fix that\")\n      xStr <- \"New_Data_file\"\n    }\n  }\n  return(xStr)\n}\n#For bulk downloading tables\nACSListToCSV <- function(bulkArray, folder){\n  if(length(bulkArray) %% 2){\n    #Scream if array is odd length. We don't need any mistakes!\n    print(\"Somethings Missing. List format should be like c( Data Name, DataCode, ... )\")\n    return(\"ERROR\")\n  }\n  #Validates folder name\n  folder <- nameFixer(folder, \"Folder\")\n  #Makes a folder if needed\n  if(!file.exists(folder)){\n    dir.create(folder)\n    print(\"New Folder Made Adding Files\")\n  }\n  index <- 1\n  #Adds files\n  while(index < length(bulkArray)){\n    fileImplications(nameFixer(bulkArray[index], \"File\"), bulkArray[index+1]) # (title , code)\n    index <- index + 2\n  }\n  print(\"All Files have been downloaded\")\n}\n#ACS Data frame to CSV file\ndataToCSV <- function(data, fileName){\n  #This adds the file to the folder\n  path <- paste(\".\\\\\",folder,\"\\\\\", fileName, sep='')\n  #Makes the CSV\n  write.csv(data, path)\n  print(paste(\"Added File:\",fileName))\n}"
  },
  {
    "objectID": "posts/Aaron_C_Week2/TidyCensusOverview.html",
    "href": "posts/Aaron_C_Week2/TidyCensusOverview.html",
    "title": "Census Visual",
    "section": "",
    "text": "Both a bar plot, and chorpleth map were made from the American Community Survey (ASC) data using Tidycensus library in R.\n\n#Imports for both Graph and Map\nlibrary(tidycensus)\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(plotly)\nlibrary(ggiraph) \n\n#Grabing median_income for bar blot\nmedian_income <- get_acs(\n  geography = \"county\",\n  variables = \"B19013_001\",\n  state = \"IA\", \n  year = 2021\n)\n\n#View the mid range of countys mean income\nmedian_income_data <- median_income %>%\n  #reducing the number of countys the graph can display\n  slice(floor(99 * 0.25):floor(99 * 0.75)+1) %>%\n  #ordering from estimate highest to estimate lowest\n  arrange(desc(estimate))\n\n#The Bar plot\nmd_bar_plot <- ggplot(median_income_data, aes(x = estimate, \n                                    y = reorder(NAME, estimate),\n                                    tooltip = estimate,\n                                    data_id = GEOID)) +\n  #Generating the error bars\n  geom_errorbar(aes(xmin = estimate - moe, \n                    xmax = estimate + moe),\n                    width = 0.5, \n                    size = 1) + \n  #Coloring the estimate dot \n  geom_point_interactive(color = \"darkblue\", size = 1.5) +\n  #Bottom Label range\n  scale_x_continuous(labels = label_dollar()) + \n  #County names and removing the Unnecessary words\n  scale_y_discrete(labels = function(x) str_remove(x, \" County, Iowa|, Iowa\")) +\n  #Graph labeling for views convince \n  labs(title = \"Median Income 2021 ACS\",\n       #subtitle = \"Counties in Iowa\",\n       caption = \"Data acquired with R and tidycensus. \\nError bars represent margin of error around estimates of Median income.\",\n       x = \"ACS Estimate Mean Income\",\n       y = \"Counties in Iowa\") + \n  #Text Sizing\n  theme_minimal(base_size = 8)\n#Making the graph interactive\nmd_bar_plot_interactive <- girafe(ggobj = md_bar_plot) %>% girafe_options(opts_hover(css = \"fill:purple;\"))\n\n#The Map\nmedian_income_map <- get_acs(\n  geography = \"tract\",\n  variables = \"B19013_001\",\n  state = \"IA\",\n  year = 2021,\n  geometry = TRUE\n)\n# The Map\nmd_chorpleth_map <- ggplot(median_income_map, aes(fill = estimate)) + \n  #The map display\n  geom_sf() + \n  #Empty theme of the map\n  theme_void() + \n  #Colors the map \n  scale_fill_viridis_c(option = \"G\", n.breaks = 10) + \n  #Information\n  labs(title = \"Median Income by Census track\",\n       subtitle = \"\",\n       fill = \"ACS estimates\",\n       caption = \"Median Income by ACS tidycensus R package in 2021\")\n\n\n#This renders the bar plot \nmd_bar_plot_interactive\n\n#This renders the chorpleth map\nmd_chorpleth_map\n\n\n\n\nBar Plot\n\n\n\n\n\nChorpleth Map"
  },
  {
    "objectID": "posts/Aaron_C_Week3/Aaron_C_Week3.html",
    "href": "posts/Aaron_C_Week3/Aaron_C_Week3.html",
    "title": "Week Three",
    "section": "",
    "text": "This week was dedicated to collecting data\n\nData Camp Lessons completed:\n\nWriting Efficient R Code"
  },
  {
    "objectID": "posts/Aaron_C_Week3/Week3_Research.html",
    "href": "posts/Aaron_C_Week3/Week3_Research.html",
    "title": "Week Three Research",
    "section": "",
    "text": "Some helpful data that was found\nFarmers Market Prices:\nAt the 2015 PFI Annual Conference, Kay Jensen collected farmers’ vegetable prices. Recent data shows price ranges for tomatoes, ranging from $2.50 to $4 per pound.\nExpatistan:\nTells the price of 1 kg (2 lb.) of tomatoes in Des Moines IA can be used to find other prices located in IA.\nAgMRC:\nProvides a some detailed and helpful references for tomatoes.\nMarket Maker:\nA potential source to find and locate local farmers that grow Heirloom Tomatoes.\nLocal Harvest:\nA potential source to find and locate local farmers that grow Heirloom Tomatoes.\nPractical farmers:\nA potential source to find and locate local farmers that grow Heirloom Tomatoes.\nInstacart:\nA cite that could be of use to find Items.\nNFMD:\nMarket on Central - Farmers Market in Historic Downtown Fort Dodge\nLocal Farms Found\n\nButcher Crick Farms\nheart land fresh family farm\nA family market place\nAlices Garden\n\nStores that sell Heirloom Tomatoes that we can collect data from\n\nGateway market\nRuss’s Market\nFresh thyme\nHy-Vee\n\nPlaces that might use Heirloom Tomatoes\n\nJava House\n\nPotential Useful Sources\nNational Retail Report - Specialty Crops ( USDA Fruits & Vegetables Market Report ):\nAdvertised Prices for Specialty Crops at Major Retail Supermarket Outlets it contains Heirloom Tomatoes but only specifies the Midwest U.S.\nFRED Economic Data:\nContains the average Price of Tomatoes( Tomatoes, Field Grown (Cost per Pound/453.6 Grams) in U.S. City Average) All fresh field grown and vine ripened round red tomatoes. Includes organic and non-organic.\nFarmers Market Nutrition Program: Lists farmers markets in Iowa\nDead Ends\nIowa Food Cooperative (Iowa Food Coop): does not have heirloom tomatoes\nInvestigated Stores\n\nDogpatch: They have seeds but no tomatoes for sale\nFairway: They don’t have any heirloom tomatoes for sale\nWalmart: They have seeds but no tomatoes for sale\nTarget: They don’t have any heirloom tomatoes for sale\nCostco: They don’t have any heirloom tomatoes for sale\nWhole Foods Market: They don’t have any heirloom tomatoes for sale in Iowa\nAldi: They don’t have any heirloom tomatoes for sale\nNew Pioneer: They don’t have any heirloom tomatoes for sale\nTrader Joe’s: They don’t have any heirloom tomatoes for sale\nCampbell’s Nutrition: They don’t have any heirloom tomatoes for sale"
  },
  {
    "objectID": "posts/Aaron_C_Week3/Week3_Research.html#eggs",
    "href": "posts/Aaron_C_Week3/Week3_Research.html#eggs",
    "title": "Week Three Research",
    "section": "EGGs",
    "text": "EGGs\nSome helpful data that was found\nNASS Eggs:\nContains tons of data that could be useful\nStores that sell Eggs that we can collect data from\n\ndogpatch\nGoPuff"
  },
  {
    "objectID": "posts/Aaron_C_Week3/Week3_Research.html#bacon",
    "href": "posts/Aaron_C_Week3/Week3_Research.html#bacon",
    "title": "Week Three Research",
    "section": "Bacon",
    "text": "Bacon\nStores that sell Bacon that we can collect data from - GoPuff\nTotal Websites looked: 99"
  }
]